import json

# Charger le notebook
with open('ALPHABOT_ML_TRAINING_COLAB.ipynb', 'r', encoding='utf-8') as f:
    nb = json.load(f)

# Ajouter une cellule de suivi et reprise automatique au d√©but
progress_cell = {
    "cell_type": "markdown",
    "metadata": {},
    "source": [
        "# üîÑ Suivi de Progression et Reprise Automatique\n",
        "\n",
        "Cette cellule v√©rifie l'√©tat d'avancement du notebook et permet de reprendre l√† o√π le processus s'est arr√™t√©."
    ]
}

# Ajouter la cellule de suivi apr√®s la premi√®re cellule
nb['cells'].insert(1, progress_cell)

# Ajouter une cellule de code pour le suivi et la reprise
tracking_cell = {
    "cell_type": "code",
    "metadata": {},
    "execution_count": None,
    "outputs": [],
    "source": [
        "# üîÑ Syst√®me de suivi et reprise automatique\n",
        "import os\n",
        "import json\n",
        "import pickle\n",
        "from datetime import datetime\n",
        "\n",
        "# D√©finir le chemin de base\n",
        "base_path = '/content/drive/MyDrive/AlphaBot_ML_Training'\n",
        "os.makedirs(base_path, exist_ok=True)\n",
        "\n",
        "# Fichier de suivi de progression\n",
        "progress_file = f'{base_path}/progress_tracker.json'\n",
        "\n",
        "# √âtat initial des √©tapes\n",
        "default_progress = {\n",
        "    'cell_1_setup': False,\n",
        "    'cell_2_data_download': False,\n",
        "    'cell_3_data_analysis': False,\n",
        "    'cell_4_pattern_training': False,\n",
        "    'cell_5_sentiment_training': False,\n",
        "    'cell_6_rag_training': False,\n",
        "    'cell_7_integration': False,\n",
        "    'cell_8_testing': False,\n",
        "    'cell_9_deployment': False,\n",
        "    'last_cell_executed': None,\n",
        "    'start_time': None,\n",
        "    'last_update': None\n",
        "}\n",
        "\n",
        "# Charger ou initialiser le suivi\n",
        "try:\n",
        "    with open(progress_file, 'r') as f:\n",
        "        progress = json.load(f)\n",
        "    print(\"üìä Suivi de progression charg√©\")\n",
        "except:\n",
        "    progress = default_progress.copy()\n",
        "    progress['start_time'] = datetime.now().isoformat()\n",
        "    print(\"üÜï Nouveau suivi de progression initialis√©\")\n",
        "\n",
        "# Fonction pour mettre √† jour la progression\n",
        "def update_progress(cell_name):\n",
        "    progress[cell_name] = True\n",
        "    progress['last_cell_executed'] = cell_name\n",
        "    progress['last_update'] = datetime.now().isoformat()\n",
        "    \n",
        "    with open(progress_file, 'w') as f:\n",
        "        json.dump(progress, f, indent=2)\n",
        "    \n",
        "    print(f\"‚úÖ Progression mise √† jour: {cell_name}\")\n",
        "\n",
        "# Fonction pour v√©rifier l'√©tat\n",
        "def check_progress():\n",
        "    print(\"\\nüìã √âtat actuel de la progression:\")\n",
        "    print(\"=\" * 50)\n",
        "    \n",
        "    completed = sum(progress.values()) - 4  # Exclure les m√©tadonn√©es\n",
        "    total = len(default_progress) - 4\n",
        "    \n",
        "    print(f\"üìä Progression: {completed}/{total} √©tapes compl√©t√©es ({completed/total*100:.1f}%)\")\n",
        "    print(f\"‚è∞ D√©marr√©: {progress.get('start_time', 'N/A')}\")\n",
        "    print(f\"üîÑ Derni√®re mise √† jour: {progress.get('last_update', 'N/A')}\")\n",
        "    print(f\"üìç Derni√®re cellule: {progress.get('last_cell_executed', 'Aucune')}\")\n",
        "    \n",
        "    print(\"\\nüìù Statut des √©tapes:\")\n",
        "    steps = [\n",
        "        ('cell_1_setup', '1. Configuration initiale'),\n",
        "        ('cell_2_data_download', '2. T√©l√©chargement des donn√©es'),\n",
        "        ('cell_3_data_analysis', '3. Analyse des donn√©es'),\n",
        "        ('cell_4_pattern_training', '4. Entra√Ænement Pattern Detector'),\n",
        "        ('cell_5_sentiment_training', '5. Entra√Ænement Sentiment Analyzer'),\n",
        "        ('cell_6_rag_training', '6. Entra√Ænement RAG'),\n",
        "        ('cell_7_integration', '7. Int√©gration'),\n",
        "        ('cell_8_testing', '8. Tests'),\n",
        "        ('cell_9_deployment', '9. D√©ploiement')\n",
        "    ]\n",
        "    \n",
        "    for step_key, step_name in steps:\n",
        "        status = \"‚úÖ\" if progress.get(step_key, False) else \"‚è≥\"\n",
        "        print(f\"  {status} {step_name}\")\n",
        "    \n",
        "    print(\"=\" * 50)\n",
        "    \n",
        "    # Sugg√©rer la prochaine √©tape\n",
        "    if not progress['cell_1_setup']:\n",
        "        print(\"\\nüöÄ Prochaine √©tape: Ex√©cuter la cellule 1 (Configuration)\")\n",
        "    elif not progress['cell_2_data_download']:\n",
        "        print(\"\\nüöÄ Prochaine √©tape: Ex√©cuter la cellule 2 (T√©l√©chargement des donn√©es)\")\n",
        "    elif not progress['cell_3_data_analysis']:\n",
        "        print(\"\\nüöÄ Prochaine √©tape: Ex√©cuter la cellule 3 (Analyse des donn√©es)\")\n",
        "    elif not progress['cell_4_pattern_training']:\n",
        "        print(\"\\nüöÄ Prochaine √©tape: Ex√©cuter la cellule 4 (Pattern Detector)\")\n",
        "    elif not progress['cell_5_sentiment_training']:\n",
        "        print(\"\\nüöÄ Prochaine √©tape: Ex√©cuter la cellule 5 (Sentiment Analyzer)\")\n",
        "    elif not progress['cell_6_rag_training']:\n",
        "        print(\"\\nüöÄ Prochaine √©tape: Ex√©cuter la cellule 6 (RAG)\")\n",
        "    elif not progress['cell_7_integration']:\n",
        "        print(\"\\nüöÄ Prochaine √©tape: Ex√©cuter la cellule 7 (Int√©gration)\")\n",
        "    elif not progress['cell_8_testing']:\n",
        "        print(\"\\nüöÄ Prochaine √©tape: Ex√©cuter la cellule 8 (Tests)\")\n",
        "    elif not progress['cell_9_deployment']:\n",
        "        print(\"\\nüöÄ Prochaine √©tape: Ex√©cuter la cellule 9 (D√©ploiement)\")\n",
        "    else:\n",
        "        print(\"\\nüéâ Toutes les √©tapes sont compl√©t√©es !\")\n",
        "\n",
        "# V√©rifier l'√©tat actuel\n",
        "check_progress()\n",
        "\n",
        "# Instructions pour l'utilisateur\n",
        "print(\"\\nüí° Instructions:\")\n",
        "print(\"1. Ex√©cutez cette cellule pour voir l'√©tat d'avancement\")\n",
        "print(\"2. Chaque cellule mettra √† jour automatiquement sa progression\")\n",
        "print(\"3. Si le processus s'arr√™te, relancez simplement cette cellule\")\n",
        "print(\"4. Continuez avec la cellule sugg√©r√©e\")\n",
        "print(\"\\nüîÑ Note: Le syst√®me est con√ßu pour supporter les arr√™ts/red√©marrages\")\n"
    ]
}

# Ins√©rer la cellule de tracking apr√®s la cellule markdown
nb['cells'].insert(2, tracking_cell)

# Modifier chaque cellule pour ajouter le suivi de progression
cell_mapping = [
    ('CELLULE 1: Configuration initiale', 'cell_1_setup'),
    ('CELLULE 2: T√©l√©chargement des donn√©es', 'cell_2_data_download'),
    ('CELLULE 3: Analyse des donn√©es', 'cell_3_data_analysis'),
    ('CELLULE 4: Entra√Ænement Pattern Detector', 'cell_4_pattern_training'),
    ('CELLULE 5: Entra√Ænement Sentiment Analyzer', 'cell_5_sentiment_training'),
    ('CELLULE 6: Entra√Ænement RAG', 'cell_6_rag_training'),
    ('CELLULE 7: Int√©gration', 'cell_7_integration'),
    ('CELLULE 8: Tests', 'cell_8_testing'),
    ('CELLULE 9: D√©ploiement', 'cell_9_deployment')
]

for cell in nb['cells']:
    if cell['cell_type'] == 'code':
        cell_content = ''.join(cell['source'])
        
        for cell_title, progress_key in cell_mapping:
            if cell_title in cell_content:
                # Ajouter le suivi au d√©but de la cellule
                tracking_code = [
                    "# Mettre √† jour la progression\n",
                    "try:\n",
                    "    update_progress('" + progress_key + "')\n",
                    "    print(f\"üìä D√©marrage de {cell_title}\")\n",
                    "except:\n",
                    "    print(\"‚ö†Ô∏è Impossible de mettre √† jour la progression\")\n",
                    "\n"
                ]
                
                # Ins√©rer apr√®s le titre de la cellule
                insert_idx = 0
                for i, line in enumerate(cell['source']):
                    if cell_title in line:
                        insert_idx = i + 1
                        break
                
                cell['source'][insert_idx:insert_idx] = tracking_code
                break

# Sauvegarder le notebook corrig√©
with open('ALPHABOT_ML_TRAINING_COLAB.ipynb', 'w', encoding='utf-8') as f:
    json.dump(nb, f, indent=1, ensure_ascii=False)

print("Notebook mis √† jour avec succ√®s - syst√®me de suivi et reprise automatique ajout√©!")
