import json

# Charger le notebook
with open('ALPHABOT_ML_TRAINING_COLAB.ipynb', 'r', encoding='utf-8') as f:
    nb = json.load(f)

# Corriger la cellule 2 (montage Google Drive) pour g√©rer le cas "Mountpoint must not already contain files"
for cell in nb['cells']:
    if cell['cell_type'] == 'code' and 'CELLULE 2' in ''.join(cell['source']) and 'drive.mount' in ''.join(cell['source']):
        source = []
        source.append("print(\"üîß Configuration Google Drive...\")\n")
        source.append("from google.colab import drive\n")
        source.append("import os\n")
        source.append("\n")
        source.append("# G√©rer proprement le montage de Google Drive\n")
        source.append("MOUNT_POINT = '/content/drive'\n")
        source.append("try:\n")
        source.append("    if os.path.ismount(MOUNT_POINT):\n")
        source.append("        print(\"‚ÑπÔ∏è Drive d√©j√† mont√©. Remontage propre...\")\n")
        source.append("        drive.flush_and_unmount()\n")
        source.append("        # Nettoyer le point de montage si des fichiers y restent\n")
        source.append("        try:\n")
        source.append("            for entry in os.listdir(MOUNT_POINT):\n")
        source.append("                path = os.path.join(MOUNT_POINT, entry)\n")
        source.append("                if os.path.isfile(path):\n")
        source.append("                    os.remove(path)\n")
        source.append("        except Exception as e:\n")
        source.append("            print(f\"‚ö†Ô∏è Nettoyage non critique: {e}\")\n")
        source.append("    else:\n")
        source.append("        # Si le r√©pertoire existe et contient d√©j√† des fichiers (en local), ne pas remonter directement\n")
        source.append("        if os.path.isdir(MOUNT_POINT) and os.listdir(MOUNT_POINT):\n")
        source.append("            print(\"‚ÑπÔ∏è Le dossier /content/drive contient d√©j√† des fichiers locaux. Tentative de d√©montage pr√©alable si r√©sidu de montage.\")\n")
        source.append("            try:\n")
        source.append("                drive.flush_and_unmount()\n")
        source.append("            except Exception as e:\n")
        source.append("                print(f\"‚ö†Ô∏è D√©montage non n√©cessaire: {e}\")\n")
        source.append("\n")
        source.append("    # Monter Google Drive en lecture/√©criture\n")
        source.append("    drive.mount(MOUNT_POINT, force_remount=True)\n")
        source.append("    print(\"‚úÖ Google Drive mont√© avec succ√®s\")\n")
        source.append("except Exception as e:\n")
        source.append("    msg = str(e)\n")
        source.append("    print(f\"‚ùå Erreur de montage: {msg}\")\n")
        source.append("    # Gestion sp√©cifique du message d'erreur rencontr√©\n")
        source.append("    if 'Mountpoint must not already contain files' in msg:\n")
        source.append("        print(\"üîß Correction automatique: d√©montage + nettoyage + remontage\")\n")
        source.append("        try:\n")
        source.append("            drive.flush_and_unmount()\n")
        source.append("        except Exception as e2:\n")
        source.append("            print(f\"‚ö†Ô∏è flush_and_unmount a √©chou√©/non requis: {e2}\")\n")
        source.append("        try:\n")
        source.append("            # Cr√©er le dossier s'il n'existe pas\n")
        source.append("            os.makedirs(MOUNT_POINT, exist_ok=True)\n")
        source.append("            # Supprimer tout fichier r√©siduel local dans le dossier de montage\n")
        source.append("            for entry in os.listdir(MOUNT_POINT):\n")
        source.append("                path = os.path.join(MOUNT_POINT, entry)\n")
        source.append("                if os.path.isfile(path):\n")
        source.append("                    os.remove(path)\n")
        source.append("        except Exception as e3:\n")
        source.append("            print(f\"‚ö†Ô∏è Nettoyage local non critique: {e3}\")\n")
        source.append("        # Tenter un remontage forc√©\n")
        source.append("        drive.mount(MOUNT_POINT, force_remount=True)\n")
        source.append("        print(\"‚úÖ Google Drive remont√© avec succ√®s apr√®s correction\")\n")
        source.append("    else:\n")
        source.append("        raise\n")
        source.append("\n")
        source.append("# D√©finir le chemin de base du projet sur Drive\n")
        source.append("base_path = '/content/drive/MyDrive/AlphaBot_ML_Training'\n")
        source.append("os.makedirs(base_path, exist_ok=True)\n")
        source.append("os.makedirs(f\"{base_path}/data\", exist_ok=True)\n")
        source.append("os.makedirs(f\"{base_path}/models\", exist_ok=True)\n")
        source.append("os.makedirs(f\"{base_path}/checkpoints\", exist_ok=True)\n")
        source.append("print(f\"üìÅ R√©pertoires pr√™ts sous: {base_path}\")\n")
        cell['source'] = source
        break

# Sauvegarder le notebook corrig√©
with open('ALPHABOT_ML_TRAINING_COLAB.ipynb', 'w', encoding='utf-8') as f:
    json.dump(nb, f, indent=1, ensure_ascii=False)

print("Notebook corrig√© avec succ√®s - montage Google Drive r√©silient en cellule 2.")
