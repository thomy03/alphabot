#!/usr/bin/env python3
"""
Test du Paper Trading Engine AlphaBot
Simulation de trading en temps r√©el
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta
import time
from unittest.mock import AsyncMock, patch

# Ajouter le r√©pertoire parent au path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

# Mock Redis
sys.modules['redis'] = AsyncMock()
sys.modules['redis.asyncio'] = AsyncMock()

async def test_paper_trading_basic():
    """Test fonctionnalit√©s de base du paper trading"""
    try:
        from alphabot.core.paper_trading import PaperTradingEngine, PaperTradingConfig
        
        print("üìä Test Paper Trading - Fonctionnalit√©s de base")
        print("=" * 60)
        
        # Configuration test
        config = PaperTradingConfig(
            initial_capital=50000.0,
            commission_rate=0.001,
            price_update_interval=1,  # 1 seconde pour test
            portfolio_update_interval=2,
            signal_check_interval=1,
            market_hours_only=False,  # Pas de restriction horaire pour test
            data_directory="test_paper_trading"
        )
        
        # Cr√©er engine
        engine = PaperTradingEngine(config)
        
        print(f"üí∞ Capital initial: ${engine.cash:,.0f}")
        
        # Simuler quelques prix
        engine.current_prices = {
            'AAPL': 150.0,
            'MSFT': 300.0,
            'GOOGL': 2500.0,
            'TSLA': 200.0
        }
        
        print(f"üíπ Prix simul√©s:")
        for symbol, price in engine.current_prices.items():
            print(f"   {symbol}: ${price:.2f}")
        
        # Test cr√©ation d'ordres
        from alphabot.core.paper_trading import PaperOrder, PaperOrderType
        
        test_orders = [
            PaperOrder(
                id="test_001",
                symbol="AAPL",
                side="BUY",
                quantity=100,
                order_type=PaperOrderType.MARKET
            ),
            PaperOrder(
                id="test_002", 
                symbol="MSFT",
                side="BUY",
                quantity=50,
                order_type=PaperOrderType.MARKET
            ),
            PaperOrder(
                id="test_003",
                symbol="GOOGL", 
                side="BUY",
                quantity=10,
                order_type=PaperOrderType.MARKET
            )
        ]
        
        print(f"\nüìã Test d'ordres ({len(test_orders)} ordres):")
        
        # Ajouter ordres √† l'engine
        for order in test_orders:
            engine.orders[order.id] = order
            
        # Simuler ex√©cution des ordres
        await engine._process_pending_orders()
        
        # V√©rifier r√©sultats
        executed_orders = [o for o in engine.execution_history]
        positions_count = len(engine.positions)
        remaining_cash = engine.cash
        
        print(f"   Ordres ex√©cut√©s:      {len(executed_orders)}")
        print(f"   Positions ouvertes:   {positions_count}")
        print(f"   Cash restant:         ${remaining_cash:,.0f}")
        
        # Test portfolio summary
        portfolio = await engine.get_portfolio_summary()
        
        print(f"\nüíº R√©sum√© portfolio:")
        print(f"   Valeur totale:        ${portfolio['total_value']:,.0f}")
        print(f"   Valeur investie:      ${portfolio['invested_value']:,.0f}")
        print(f"   P&L total:            ${portfolio['total_pnl']:+,.0f}")
        print(f"   Rendement:            {portfolio['total_return']:+.1%}")
        
        # V√©rifier positions
        print(f"\nüìà Positions d√©taill√©es:")
        for pos in portfolio['positions']:
            print(f"   {pos['symbol']:<6} {pos['quantity']:>8.0f} @ ${pos['avg_cost']:>7.2f} = ${pos['market_value']:>10,.0f}")
        
        success = len(executed_orders) > 0 and positions_count > 0
        
        print(f"\n{'‚úÖ Test basic r√©ussi!' if success else '‚ùå Test basic √©chou√©'}")
        return success
        
    except Exception as e:
        print(f"‚ùå Erreur test basic: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_signal_processing():
    """Test traitement des signaux de trading"""
    try:
        from alphabot.core.paper_trading import PaperTradingEngine, PaperTradingConfig
        from alphabot.core.signal_hub import Signal, SignalType, SignalPriority
        
        print(f"\nüîî Test traitement des signaux")
        print("=" * 40)
        
        # Mock signal hub
        mock_hub = AsyncMock()
        
        with patch('alphabot.core.paper_trading.get_signal_hub', return_value=mock_hub):
            config = PaperTradingConfig(
                initial_capital=100000.0,
                market_hours_only=False
            )
            
            engine = PaperTradingEngine(config)
            
            # Prix simul√©s
            engine.current_prices = {
                'AAPL': 175.0,
                'MSFT': 350.0,
                'AMZN': 150.0
            }
            
            # Test signal d'achat
            buy_signal = Signal(
                id="buy_001",
                type=SignalType.BUY_SIGNAL,
                source_agent="technical_agent",
                priority=SignalPriority.HIGH,
                data={
                    'symbol': 'AAPL',
                    'weight': 0.05,  # 5% du portfolio
                    'confidence': 0.85
                }
            )
            
            print(f"üìà Signal d'achat: {buy_signal.data['symbol']} ({buy_signal.data['weight']:.0%})")
            
            await engine._handle_trading_signal(buy_signal)
            
            # V√©rifier cr√©ation d'ordre
            buy_orders = [o for o in engine.orders.values() if o.side == "BUY"]
            print(f"   Ordres d'achat cr√©√©s: {len(buy_orders)}")
            
            if buy_orders:
                order = buy_orders[0]
                print(f"   D√©tail: {order.quantity:.0f} {order.symbol} @ market")
            
            # Test signal de rebalancement
            rebalance_signal = Signal(
                id="rebal_001",
                type=SignalType.PORTFOLIO_REBALANCE,
                source_agent="optimization_agent", 
                priority=SignalPriority.HIGH,
                data={
                    'weights': {
                        'AAPL': 0.30,
                        'MSFT': 0.25,
                        'AMZN': 0.20,
                        'CASH': 0.25
                    }
                }
            )
            
            print(f"\nüîÑ Signal de rebalancement:")
            for symbol, weight in rebalance_signal.data['weights'].items():
                print(f"   {symbol}: {weight:.0%}")
            
            await engine._handle_trading_signal(rebalance_signal)
            
            # Compter ordres total
            total_orders = len(engine.orders)
            rebalance_orders = len([o for o in engine.orders.values() 
                                   if o.id.startswith("rebal_")])
            
            print(f"   Ordres de rebalancement: {rebalance_orders}")
            print(f"   Total ordres en attente: {total_orders}")
            
            # Simuler ex√©cution
            await engine._process_pending_orders()
            
            executed = len(engine.execution_history)
            print(f"   Ordres ex√©cut√©s: {executed}")
            
            success = total_orders > 0 and executed > 0
            
            print(f"\n{'‚úÖ Test signaux r√©ussi!' if success else '‚ùå Test signaux √©chou√©'}")
            return success
            
    except Exception as e:
        print(f"‚ùå Erreur test signaux: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_portfolio_metrics():
    """Test calcul des m√©triques de performance"""
    try:
        from alphabot.core.paper_trading import PaperTradingEngine, PaperTradingConfig, PaperPosition
        
        print(f"\nüìä Test m√©triques de performance")
        print("=" * 40)
        
        config = PaperTradingConfig(initial_capital=100000.0)
        engine = PaperTradingEngine(config)
        
        # Simuler positions existantes
        engine.positions = {
            'AAPL': PaperPosition(
                symbol='AAPL',
                quantity=100,
                avg_cost=150.0,
                market_value=17500.0,  # Prix actuel 175$
                unrealized_pnl=2500.0
            ),
            'MSFT': PaperPosition(
                symbol='MSFT', 
                quantity=50,
                avg_cost=300.0,
                market_value=17500.0,  # Prix actuel 350$
                unrealized_pnl=2500.0
            )
        }
        
        # Simuler cash utilis√©
        engine.cash = 65000.0  # 35k investi
        
        # Simuler quelques jours de rendements
        engine.metrics['daily_returns'] = [
            0.02,   # +2%
            -0.01,  # -1%
            0.015,  # +1.5%
            -0.005, # -0.5%
            0.01    # +1%
        ]
        
        # Mettre √† jour m√©triques
        await engine._update_portfolio_metrics()
        
        portfolio = await engine.get_portfolio_summary()
        
        print(f"üíº Portfolio:")
        print(f"   Valeur totale:    ${portfolio['total_value']:,.0f}")
        print(f"   Cash:             ${portfolio['cash']:,.0f}")
        print(f"   Investi:          ${portfolio['invested_value']:,.0f}")
        print(f"   P&L:              ${portfolio['total_pnl']:+,.0f}")
        print(f"   Rendement:        {portfolio['total_return']:+.1%}")
        
        print(f"\nüìà M√©triques:")
        metrics = portfolio['metrics']
        print(f"   Sharpe ratio:     {metrics.get('sharpe_ratio', 0):.2f}")
        print(f"   Max drawdown:     {metrics.get('max_drawdown', 0):.1%}")
        print(f"   Win rate:         {metrics.get('win_rate', 0):.1%}")
        print(f"   Total trades:     {metrics.get('total_trades', 0)}")
        
        # V√©rifier calculs
        expected_total = engine.cash + sum(p.market_value for p in engine.positions.values())
        actual_total = portfolio['total_value']
        
        calculation_ok = abs(expected_total - actual_total) < 1.0
        has_positions = len(portfolio['positions']) > 0
        has_metrics = 'sharpe_ratio' in metrics
        
        success = calculation_ok and has_positions and has_metrics
        
        print(f"\n‚úÖ Validation:")
        print(f"   Calculs corrects:     {'‚úÖ' if calculation_ok else '‚ùå'}")
        print(f"   Positions d√©taill√©es: {'‚úÖ' if has_positions else '‚ùå'}")
        print(f"   M√©triques calcul√©es:  {'‚úÖ' if has_metrics else '‚ùå'}")
        
        print(f"\n{'‚úÖ Test m√©triques r√©ussi!' if success else '‚ùå Test m√©triques √©chou√©'}")
        return success
        
    except Exception as e:
        print(f"‚ùå Erreur test m√©triques: {e}")
        import traceback
        traceback.print_exc()
        return False

async def test_real_time_simulation():
    """Test simulation temps r√©el (courte dur√©e)"""
    try:
        from alphabot.core.paper_trading import PaperTradingEngine, PaperTradingConfig
        
        print(f"\n‚è±Ô∏è Test simulation temps r√©el (10 secondes)")
        print("=" * 50)
        
        # Mock CrewOrchestrator pour √©viter d√©pendances
        mock_crew = AsyncMock()
        mock_hub = AsyncMock()
        
        with patch('alphabot.core.paper_trading.CrewOrchestrator', return_value=mock_crew), \
             patch('alphabot.core.paper_trading.get_signal_hub', return_value=mock_hub):
            
            config = PaperTradingConfig(
                initial_capital=50000.0,
                price_update_interval=1,  # 1 seconde
                portfolio_update_interval=2,  # 2 secondes
                signal_check_interval=3,   # 3 secondes
                market_hours_only=False
            )
            
            engine = PaperTradingEngine(config)
            
            # Prix initiaux
            engine.current_prices = {
                'AAPL': 150.0,
                'MSFT': 300.0
            }
            
            print(f"üöÄ D√©marrage simulation...")
            print(f"   Capital: ${engine.cash:,.0f}")
            print(f"   Dur√©e: 10 secondes")
            
            # Lancer simulation en arri√®re-plan
            simulation_task = asyncio.create_task(engine.start())
            
            # Attendre quelques secondes
            await asyncio.sleep(3)
            
            # Injecter quelques ordres manuellement
            from alphabot.core.paper_trading import PaperOrder, PaperOrderType
            
            test_order = PaperOrder(
                id="sim_001",
                symbol="AAPL",
                side="BUY", 
                quantity=50,
                order_type=PaperOrderType.MARKET
            )
            
            engine.orders[test_order.id] = test_order
            print(f"üìã Ordre inject√©: {test_order.side} {test_order.quantity} {test_order.symbol}")
            
            # Attendre encore
            await asyncio.sleep(5)
            
            # Arr√™ter simulation
            await engine.stop()
            simulation_task.cancel()
            
            try:
                await simulation_task
            except asyncio.CancelledError:
                pass
            
            # V√©rifier r√©sultats
            portfolio = await engine.get_portfolio_summary()
            
            print(f"\nüìä R√©sultats apr√®s 8 secondes:")
            print(f"   Valeur finale:        ${portfolio['total_value']:,.0f}")
            print(f"   Ordres ex√©cut√©s:      {portfolio['total_trades']}")
            print(f"   Positions actives:    {len(portfolio['positions'])}")
            print(f"   Cash restant:         ${portfolio['cash']:,.0f}")
            
            # V√©rifier logs/m√©triques
            has_trades = portfolio['total_trades'] > 0
            has_positions = len(portfolio['positions']) > 0
            
            success = engine.is_running == False  # Arr√™t propre
            
            print(f"\n‚úÖ Validation:")
            print(f"   Arr√™t propre:         {'‚úÖ' if not engine.is_running else '‚ùå'}")
            print(f"   Activit√© trading:     {'‚úÖ' if has_trades or has_positions else '‚ö†Ô∏è'}")
            
            print(f"\n{'‚úÖ Test simulation r√©ussi!' if success else '‚ùå Test simulation √©chou√©'}")
            return success
            
    except Exception as e:
        print(f"‚ùå Erreur test simulation: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Test principal"""
    print("üß™ TESTS PAPER TRADING ENGINE - AlphaBot Phase 5")
    print("=" * 70)
    
    results = []
    
    # Test fonctionnalit√©s de base
    print("\n1Ô∏è‚É£ Test fonctionnalit√©s de base...")
    result1 = await test_paper_trading_basic()
    results.append(result1)
    
    # Test traitement signaux
    print("\n2Ô∏è‚É£ Test traitement des signaux...")
    result2 = await test_signal_processing()
    results.append(result2)
    
    # Test m√©triques
    print("\n3Ô∏è‚É£ Test m√©triques de performance...")
    result3 = await test_portfolio_metrics()
    results.append(result3)
    
    # Test simulation temps r√©el
    print("\n4Ô∏è‚É£ Test simulation temps r√©el...")
    result4 = await test_real_time_simulation()
    results.append(result4)
    
    # Bilan global
    success_count = sum(results)
    total_tests = len(results)
    
    print("\n" + "=" * 70)
    print(f"üìä BILAN TESTS: {success_count}/{total_tests} r√©ussis")
    
    if success_count == total_tests:
        print("\nüéâ TOUS LES TESTS R√âUSSIS!")
        print("‚úÖ Paper Trading engine op√©rationnel")
        print("‚úÖ Traitement signaux en temps r√©el")
        print("‚úÖ M√©triques de performance")
        print("‚úÖ Simulation multi-threading")
        print("\nüöÄ Pr√™t pour paper trading en production!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è {total_tests - success_count} test(s) √©chou√©(s)")
        print("üîß Corrections n√©cessaires")
        return 1

if __name__ == "__main__":
    exit_code = asyncio.run(main())